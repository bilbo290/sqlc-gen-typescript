"use strict";
// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file plugin/codegen.proto (package plugin, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerateResponse = exports.GenerateRequest = exports.Parameter = exports.Query = exports.Column = exports.Identifier = exports.Table = exports.Enum = exports.CompositeType = exports.Schema = exports.Catalog = exports.Codegen_WASM = exports.Codegen_Process = exports.Codegen = exports.Settings = exports.File = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from message plugin.File
 */
class File extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * @generated from field: bytes contents = 2;
         */
        this.contents = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new File().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new File().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new File().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(File, a, b);
    }
}
exports.File = File;
File.runtime = protobuf_1.proto3;
File.typeName = "plugin.File";
File.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contents", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message plugin.Settings
 */
class Settings extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string version = 1;
         */
        this.version = "";
        /**
         * @generated from field: string engine = 2;
         */
        this.engine = "";
        /**
         * @generated from field: repeated string schema = 3;
         */
        this.schema = [];
        /**
         * @generated from field: repeated string queries = 4;
         */
        this.queries = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Settings().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Settings().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Settings().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Settings, a, b);
    }
}
exports.Settings = Settings;
Settings.runtime = protobuf_1.proto3;
Settings.typeName = "plugin.Settings";
Settings.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "engine", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "queries", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "codegen", kind: "message", T: Codegen },
]);
/**
 * @generated from message plugin.Codegen
 */
class Codegen extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string out = 1;
         */
        this.out = "";
        /**
         * @generated from field: string plugin = 2;
         */
        this.plugin = "";
        /**
         * @generated from field: bytes options = 3;
         */
        this.options = new Uint8Array(0);
        /**
         * @generated from field: repeated string env = 4;
         */
        this.env = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Codegen().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Codegen().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Codegen().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Codegen, a, b);
    }
}
exports.Codegen = Codegen;
Codegen.runtime = protobuf_1.proto3;
Codegen.typeName = "plugin.Codegen";
Codegen.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "plugin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "env", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "process", kind: "message", T: Codegen_Process },
    { no: 6, name: "wasm", kind: "message", T: Codegen_WASM },
]);
/**
 * @generated from message plugin.Codegen.Process
 */
class Codegen_Process extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string cmd = 1;
         */
        this.cmd = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Codegen_Process().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Codegen_Process().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Codegen_Process().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Codegen_Process, a, b);
    }
}
exports.Codegen_Process = Codegen_Process;
Codegen_Process.runtime = protobuf_1.proto3;
Codegen_Process.typeName = "plugin.Codegen.Process";
Codegen_Process.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "cmd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message plugin.Codegen.WASM
 */
class Codegen_WASM extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string url = 1;
         */
        this.url = "";
        /**
         * @generated from field: string sha256 = 2;
         */
        this.sha256 = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Codegen_WASM().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Codegen_WASM().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Codegen_WASM().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Codegen_WASM, a, b);
    }
}
exports.Codegen_WASM = Codegen_WASM;
Codegen_WASM.runtime = protobuf_1.proto3;
Codegen_WASM.typeName = "plugin.Codegen.WASM";
Codegen_WASM.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sha256", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message plugin.Catalog
 */
class Catalog extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string comment = 1;
         */
        this.comment = "";
        /**
         * @generated from field: string default_schema = 2;
         */
        this.defaultSchema = "";
        /**
         * @generated from field: string name = 3;
         */
        this.name = "";
        /**
         * @generated from field: repeated plugin.Schema schemas = 4;
         */
        this.schemas = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Catalog().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Catalog().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Catalog().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Catalog, a, b);
    }
}
exports.Catalog = Catalog;
Catalog.runtime = protobuf_1.proto3;
Catalog.typeName = "plugin.Catalog";
Catalog.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "default_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "schemas", kind: "message", T: Schema, repeated: true },
]);
/**
 * @generated from message plugin.Schema
 */
class Schema extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string comment = 1;
         */
        this.comment = "";
        /**
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * @generated from field: repeated plugin.Table tables = 3;
         */
        this.tables = [];
        /**
         * @generated from field: repeated plugin.Enum enums = 4;
         */
        this.enums = [];
        /**
         * @generated from field: repeated plugin.CompositeType composite_types = 5;
         */
        this.compositeTypes = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Schema().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Schema().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Schema().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Schema, a, b);
    }
}
exports.Schema = Schema;
Schema.runtime = protobuf_1.proto3;
Schema.typeName = "plugin.Schema";
Schema.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tables", kind: "message", T: Table, repeated: true },
    { no: 4, name: "enums", kind: "message", T: Enum, repeated: true },
    { no: 5, name: "composite_types", kind: "message", T: CompositeType, repeated: true },
]);
/**
 * @generated from message plugin.CompositeType
 */
class CompositeType extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * @generated from field: string comment = 2;
         */
        this.comment = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CompositeType().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CompositeType().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CompositeType().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CompositeType, a, b);
    }
}
exports.CompositeType = CompositeType;
CompositeType.runtime = protobuf_1.proto3;
CompositeType.typeName = "plugin.CompositeType";
CompositeType.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message plugin.Enum
 */
class Enum extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * @generated from field: repeated string vals = 2;
         */
        this.vals = [];
        /**
         * @generated from field: string comment = 3;
         */
        this.comment = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Enum().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Enum().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Enum().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Enum, a, b);
    }
}
exports.Enum = Enum;
Enum.runtime = protobuf_1.proto3;
Enum.typeName = "plugin.Enum";
Enum.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vals", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message plugin.Table
 */
class Table extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated plugin.Column columns = 2;
         */
        this.columns = [];
        /**
         * @generated from field: string comment = 3;
         */
        this.comment = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Table().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Table().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Table().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Table, a, b);
    }
}
exports.Table = Table;
Table.runtime = protobuf_1.proto3;
Table.typeName = "plugin.Table";
Table.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "rel", kind: "message", T: Identifier },
    { no: 2, name: "columns", kind: "message", T: Column, repeated: true },
    { no: 3, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message plugin.Identifier
 */
class Identifier extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string catalog = 1;
         */
        this.catalog = "";
        /**
         * @generated from field: string schema = 2;
         */
        this.schema = "";
        /**
         * @generated from field: string name = 3;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Identifier().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Identifier().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Identifier().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Identifier, a, b);
    }
}
exports.Identifier = Identifier;
Identifier.runtime = protobuf_1.proto3;
Identifier.typeName = "plugin.Identifier";
Identifier.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "catalog", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message plugin.Column
 */
class Column extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * @generated from field: bool not_null = 3;
         */
        this.notNull = false;
        /**
         * @generated from field: bool is_array = 4;
         */
        this.isArray = false;
        /**
         * @generated from field: string comment = 5;
         */
        this.comment = "";
        /**
         * @generated from field: int32 length = 6;
         */
        this.length = 0;
        /**
         * @generated from field: bool is_named_param = 7;
         */
        this.isNamedParam = false;
        /**
         * @generated from field: bool is_func_call = 8;
         */
        this.isFuncCall = false;
        /**
         * XXX: Figure out what PostgreSQL calls `foo.id`
         *
         * @generated from field: string scope = 9;
         */
        this.scope = "";
        /**
         * @generated from field: string table_alias = 11;
         */
        this.tableAlias = "";
        /**
         * @generated from field: bool is_sqlc_slice = 13;
         */
        this.isSqlcSlice = false;
        /**
         * @generated from field: string original_name = 15;
         */
        this.originalName = "";
        /**
         * @generated from field: bool unsigned = 16;
         */
        this.unsigned = false;
        /**
         * @generated from field: int32 array_dims = 17;
         */
        this.arrayDims = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Column().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Column().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Column().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Column, a, b);
    }
}
exports.Column = Column;
Column.runtime = protobuf_1.proto3;
Column.typeName = "plugin.Column";
Column.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "not_null", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "is_array", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "length", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "is_named_param", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "is_func_call", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "table", kind: "message", T: Identifier },
    { no: 11, name: "table_alias", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "type", kind: "message", T: Identifier },
    { no: 13, name: "is_sqlc_slice", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "embed_table", kind: "message", T: Identifier },
    { no: 15, name: "original_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "unsigned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "array_dims", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * @generated from message plugin.Query
 */
class Query extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string text = 1;
         */
        this.text = "";
        /**
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * @generated from field: string cmd = 3;
         */
        this.cmd = "";
        /**
         * @generated from field: repeated plugin.Column columns = 4;
         */
        this.columns = [];
        /**
         * @generated from field: repeated plugin.Parameter params = 5 [json_name = "parameters"];
         */
        this.params = [];
        /**
         * @generated from field: repeated string comments = 6;
         */
        this.comments = [];
        /**
         * @generated from field: string filename = 7;
         */
        this.filename = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Query().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Query().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Query().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Query, a, b);
    }
}
exports.Query = Query;
Query.runtime = protobuf_1.proto3;
Query.typeName = "plugin.Query";
Query.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cmd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "columns", kind: "message", T: Column, repeated: true },
    { no: 5, name: "params", jsonName: "parameters", kind: "message", T: Parameter, repeated: true },
    { no: 6, name: "comments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "insert_into_table", jsonName: "insert_into_table", kind: "message", T: Identifier },
]);
/**
 * @generated from message plugin.Parameter
 */
class Parameter extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int32 number = 1;
         */
        this.number = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Parameter().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Parameter().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Parameter().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Parameter, a, b);
    }
}
exports.Parameter = Parameter;
Parameter.runtime = protobuf_1.proto3;
Parameter.typeName = "plugin.Parameter";
Parameter.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "column", kind: "message", T: Column },
]);
/**
 * @generated from message plugin.GenerateRequest
 */
class GenerateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated plugin.Query queries = 3;
         */
        this.queries = [];
        /**
         * @generated from field: string sqlc_version = 4 [json_name = "sqlc_version"];
         */
        this.sqlcVersion = "";
        /**
         * @generated from field: bytes plugin_options = 5 [json_name = "plugin_options"];
         */
        this.pluginOptions = new Uint8Array(0);
        /**
         * @generated from field: bytes global_options = 6 [json_name = "global_options"];
         */
        this.globalOptions = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenerateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenerateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenerateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GenerateRequest, a, b);
    }
}
exports.GenerateRequest = GenerateRequest;
GenerateRequest.runtime = protobuf_1.proto3;
GenerateRequest.typeName = "plugin.GenerateRequest";
GenerateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: Settings },
    { no: 2, name: "catalog", kind: "message", T: Catalog },
    { no: 3, name: "queries", kind: "message", T: Query, repeated: true },
    { no: 4, name: "sqlc_version", jsonName: "sqlc_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "plugin_options", jsonName: "plugin_options", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "global_options", jsonName: "global_options", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message plugin.GenerateResponse
 */
class GenerateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated plugin.File files = 1;
         */
        this.files = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenerateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenerateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenerateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GenerateResponse, a, b);
    }
}
exports.GenerateResponse = GenerateResponse;
GenerateResponse.runtime = protobuf_1.proto3;
GenerateResponse.typeName = "plugin.GenerateResponse";
GenerateResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "files", kind: "message", T: File, repeated: true },
]);
