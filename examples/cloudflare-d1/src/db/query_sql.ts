// Code generated by sqlc. DO NOT EDIT.

export const SQLC_GEN_TYPESCRIPT_VERSION: string = "v1.1.0-cloudflare-d1-error-result";

export interface D1HttpClient {
    accountId: string;
    databaseId: string;
    apiToken: string;
    fetch?: typeof fetch;
}

export interface D1Error {
    code: number;
    message: string;
}

export interface D1QueryResult<T> {
    data: T | null;
    error: D1Error[] | null;
    success: boolean;
}

export interface D1Result {
    results?: any[];
    success: boolean;
    meta?: {
        duration?: number;
        changes?: number;
        last_row_id?: number;
    };
}

export interface D1Response {
    result: D1Result[];
    success: boolean;
    errors?: D1Error[];
    messages?: any[];
}

export interface D1Database {
    uuid: string;
    name: string;
    version?: string;
    created_at?: string;
    num_tables?: number;
    file_size?: number;
}

export interface CreateDatabaseRequest {
    name: string;
    primary_location_hint?: string;
}

export interface UpdateDatabaseRequest {
    name: string;
}

export interface ListDatabasesOptions {
    page?: number;
    per_page?: number;
    name?: string;
}

export async function createDatabase(client: D1HttpClient, request: CreateDatabaseRequest): Promise<D1Database> {
    const url = `https://api.cloudflare.com/client/v4/accounts/${client.accountId}/d1/database`;
    const fetchFn = client.fetch || fetch;
    const response = await fetchFn(url, {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${client.apiToken}`,
            "Content-Type": "application/json"
        },
        body: JSON.stringify(request)
    });
    const data = await response.json() as any;
    return data.result as D1Database;
}

export async function deleteDatabase(client: D1HttpClient, databaseId: string): Promise<void> {
    const url = `https://api.cloudflare.com/client/v4/accounts/${client.accountId}/d1/database/${databaseId}`;
    const fetchFn = client.fetch || fetch;
    await fetchFn(url, {
        method: "DELETE",
        headers: {
            "Authorization": `Bearer ${client.apiToken}`
        }
    });
}

export async function updateDatabase(client: D1HttpClient, databaseId: string, request: UpdateDatabaseRequest): Promise<D1Database> {
    const url = `https://api.cloudflare.com/client/v4/accounts/${client.accountId}/d1/database/${databaseId}`;
    const fetchFn = client.fetch || fetch;
    const response = await fetchFn(url, {
        method: "PATCH",
        headers: {
            "Authorization": `Bearer ${client.apiToken}`,
            "Content-Type": "application/json"
        },
        body: JSON.stringify(request)
    });
    const data = await response.json() as any;
    return data.result as D1Database;
}

export async function listDatabases(client: D1HttpClient, options?: ListDatabasesOptions): Promise<D1Database[]> {
    const params = new URLSearchParams();
    if (options && options.page) {
        params.append("page", String(options.page));
    }
    if (options && options.per_page) {
        params.append("per_page", String(options.per_page));
    }
    if (options && options.name) {
        params.append("name", options.name);
    }
    const queryString = params.toString();
    const url = `https://api.cloudflare.com/client/v4/accounts/${client.accountId}/d1/database${queryString ? `?${queryString}` : ""}`;
    const fetchFn = client.fetch || fetch;
    const response = await fetchFn(url, {
        method: "GET",
        headers: {
            "Authorization": `Bearer ${client.apiToken}`
        }
    });
    const data = await response.json() as any;
    return data.result || [] as D1Database[];
}

export async function getDatabase(client: D1HttpClient, databaseId: string): Promise<D1Database> {
    const url = `https://api.cloudflare.com/client/v4/accounts/${client.accountId}/d1/database/${databaseId}`;
    const fetchFn = client.fetch || fetch;
    const response = await fetchFn(url, {
        method: "GET",
        headers: {
            "Authorization": `Bearer ${client.apiToken}`
        }
    });
    const data = await response.json() as any;
    return data.result as D1Database;
}

export const getAuthorQuery = `-- name: GetAuthor :one
SELECT id, name, bio FROM authors
WHERE id = ? LIMIT 1`;

export interface GetAuthorArgs {
    id: number;
}

export interface GetAuthorRow {
    id: number;
    name: string;
    bio: string | null;
}

export async function getAuthor(client: D1HttpClient, args: GetAuthorArgs): Promise<D1QueryResult<GetAuthorRow>> {
    const url = `https://api.cloudflare.com/client/v4/accounts/${client.accountId}/d1/database/${client.databaseId}/query`;
    const fetchFn = client.fetch || fetch;
    const response = await fetchFn(url, {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${client.apiToken}`,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            sql: getAuthorQuery,
            params: [args.id]
        })
    });
    const data = await response.json() as D1Response;
    if (!data.success || data.result.length === 0 || data.result[0] === undefined) {
        return {
            data: null,
            error: data.errors || null,
            success: false
        };
    }
    const results = data.result[0].results;
    if (results == undefined || results.length !== 1) {
        return {
            data: null,
            error: null,
            success: false
        };
    }
    return {
        data: results[0] as GetAuthorRow,
        error: null,
        success: true
    };
}

export const listAuthorsQuery = `-- name: ListAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name`;

export interface ListAuthorsRow {
    id: number;
    name: string;
    bio: string | null;
}

export async function listAuthors(client: D1HttpClient): Promise<D1QueryResult<ListAuthorsRow[]>> {
    const url = `https://api.cloudflare.com/client/v4/accounts/${client.accountId}/d1/database/${client.databaseId}/query`;
    const fetchFn = client.fetch || fetch;
    const response = await fetchFn(url, {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${client.apiToken}`,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            sql: listAuthorsQuery,
            params: []
        })
    });
    const data = await response.json() as D1Response;
    if (!data.success || data.result.length === 0 || data.result[0] === undefined) {
        return {
            data: [] as ListAuthorsRow[],
            error: data.errors || null,
            success: false
        };
    }
    const results = data.result[0].results;
    return {
        data: results || [] as ListAuthorsRow[],
        error: null,
        success: true
    };
}

export const createAuthorQuery = `-- name: CreateAuthor :exec
INSERT INTO authors (
  name, bio
) VALUES (
  ?, ?
)`;

export interface CreateAuthorArgs {
    name: string;
    bio: string | null;
}

export async function createAuthor(client: D1HttpClient, args: CreateAuthorArgs): Promise<void> {
    const url = `https://api.cloudflare.com/client/v4/accounts/${client.accountId}/d1/database/${client.databaseId}/query`;
    const fetchFn = client.fetch || fetch;
    await fetchFn(url, {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${client.apiToken}`,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            sql: createAuthorQuery,
            params: [args.name, args.bio]
        })
    });
}

export const deleteAuthorQuery = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = ?`;

export interface DeleteAuthorArgs {
    id: number;
}

export async function deleteAuthor(client: D1HttpClient, args: DeleteAuthorArgs): Promise<void> {
    const url = `https://api.cloudflare.com/client/v4/accounts/${client.accountId}/d1/database/${client.databaseId}/query`;
    const fetchFn = client.fetch || fetch;
    await fetchFn(url, {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${client.apiToken}`,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            sql: deleteAuthorQuery,
            params: [args.id]
        })
    });
}

